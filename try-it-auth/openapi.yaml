openapi: 3.1.0
servers:
  - url: http://httpbin.org
    description: Basic Auth
  - url: https://gitlab.com/api/v4
    description: GitLab Cloud
info:
  title: Try It Console Authorization flows training
  version: 0.0.1
  summary: Some useful text summary info
  description: |
    # Introduction
    The Keyboard warriors team created this training for a better understanding of the _Try It_ panel - authorization flows.
    ![Try it](openapi/try-it-panel.png)

    All APIs have public and private data. The public data doesn't have authorization.
    To see private data, in most cases the user should use authorization.

    ## Structure
    Our training page has three panels.
    On the left(sidebar) you can see a list of authorization types.
    The middle panel has details of API requests and additional information about that.
    The right panel contains the Try It console.

    _Try it_ console itself is a tool, which provides the ability to make requests based on your API definition.
    Your API might have a sensitive data, so the specific routes could be under security policy.

    Currently our application supports the following authorization flows:
      - test

    # How it works
    How we setup env
  contact:
    name: Team Keyboard Warriors
    url: https://github.com/orgs/Redocly/teams/keyboard-warriors
  license:
    name: Redocly 1.0
    url: https://redocly.com/
  x-logo:
    url: 'https://avatars.githubusercontent.com/t/5150816?s=280&v=4'
    altText: Team Keyboard Warriors

paths:
  /basic-auth/foo/bar:
    get:
      tags:
        - Try It
      summary: Basic auth test
      description: |
        This endpoint simulates a basic-auth protected endpoint.

        Open Try It Console.

        Try to use Username `postman`, Password `password` and send request. It's not working because of incorrect credentials.

        Try to use correct credentials Username `foo`, Password `bar`.

        You should get 200 OK.

        A server that receives request checks for the Authorization header that contains from encoded string `foo:baar` and compares it with correct.
      operationId: basicAuth
      responses:
        '200':
          description: OK
      security:
        - basicAuth: []
  /users/{id}:
    get:
      tags:
        - Try It
      summary: Authorization Code
      description: |
        Use predefined `Client ID` and `Client Secret` or setup your own [application](https://gitlab.com/-/profile/applications)
        on Gitlab for [Authorization code flow](https://docs.gitlab.com/ee/api/oauth2.html#authorization-code-flow)

        ```js
          {
            client_id: "96fa91071d06d35112edfc9a894a795cc7abfc01e248feb1d0c086944736a2ba",
            client_secret: "30891eee492f94883d77d2d7d8ddd8e512438672c74d95fb7d08340f8be487a1"
          }
        ```
      operationId: authorizationCode
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Provide a user ID to get information about.
          example: 11713937
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 404 Not found
      security:
        - OAuth2AuthorizationCode: [ 'api' ]
  /user:
    get:
      tags:
        - Try It
      summary: Authorization Code with PKCE
      description: |
        Use predefined `Client ID` and `Client Secret` or setup your own [application](https://gitlab.com/-/profile/applications)
        on Gitlab for [Authorization code flow with PKCE](https://docs.gitlab.com/ee/api/oauth2.html#authorization-code-with-proof-key-for-code-exchange-pkce)

        ```js
          {
            client_id: "96fa91071d06d35112edfc9a894a795cc7abfc01e248feb1d0c086944736a2ba",
            client_secret: "30891eee492f94883d77d2d7d8ddd8e512438672c74d95fb7d08340f8be487a1"
          }
        ```
      operationId: authorizationCodePKCE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 404 Not found
      security:
        - OAuth2AuthorizationCodeWithPKCE: [ 'api' ]
  /users:
    get:
      tags:
        - Try It
      summary: http(bearer)/Api key
      description: |
        ```js
          {
            private_token: "glpat-R4w9zdziizKr9-iZmbSF",
          }
        ```
        OR
        ```js
          {
            bearer_token: "glpat-ZWGtLo_zzfp2xkZkpxyg",
          }
        ```
      operationId: apiKey
      parameters:
        - in: query
          name: id
          schema:
            type: number
          required: false
          description: The endpoint returns only the user by id.
        - in: query
          name: active
          schema:
            enum: [true]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 10
                items:
                  $ref: '#/components/schemas/User'
      security:
        - AccessToken: ['read_user']
        - basicAuthBearer: [ ]
components:
  securitySchemes:
    AccessToken:
      description: Personal Access Token description
      type: apiKey
      name: PRIVATE-TOKEN
      in: header

    OAuth2AuthorizationCode:
      description: OAuth2 Authorization Code description
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://gitlab.com/oauth/authorize'
          tokenUrl: 'https://gitlab.com/oauth/token'
          scopes:
            'api': Grants complete read/write access to the API, including all groups and projects, the container registry, and the package registry.
            'read_user': Grants read-only access to the authenticated user's profile through the /user API endpoint, which includes username, public email, and full name. Also grants access to read-only API endpoints under /users.
            'read_api': Grants read access to the API, including all groups and projects, the container registry, and the package registry.
            'read_repository': Grants read-only access to repositories on private projects using Git-over-HTTP or the Repository Files API.
            'write_repository': Grants read-write access to repositories on private projects using Git-over-HTTP (not using the API).
            'read_registry': Grants read-only access to container registry images on private projects.
            'write_registry': Grants write access to container registry images on private projects.
            'sudo': Grants permission to perform API actions as any user in the system, when authenticated as an admin user.
            'openid': Grants permission to authenticate with GitLab using OpenID Connect. Also gives read-only access to the user's profile and group memberships.
            'profile': Grants read-only access to the user's profile data using OpenID Connect.
            'email': Grants read-only access to the user's primary email address using OpenID Connect

    OAuth2AuthorizationCodeWithPKCE:
      description: OAuth2 Authorization Code with PKCE description
      type: oauth2
      flows:
        authorizationCode:
          x-usePkce:
            disableManualConfiguration: false
            hideClientSecretInput: false
          authorizationUrl: 'https://gitlab.com/oauth/authorize'
          tokenUrl: 'https://gitlab.com/oauth/token'
          scopes:
            'api': Grants complete read/write access to the API, including all groups and projects, the container registry, and the package registry.
            'read_user': Grants read-only access to the authenticated user's profile through the /user API endpoint, which includes username, public email, and full name. Also grants access to read-only API endpoints under /users.
            'read_api': Grants read access to the API, including all groups and projects, the container registry, and the package registry.
            'read_repository': Grants read-only access to repositories on private projects using Git-over-HTTP or the Repository Files API.
            'write_repository': Grants read-write access to repositories on private projects using Git-over-HTTP (not using the API).
            'read_registry': Grants read-only access to container registry images on private projects.
            'write_registry': Grants write access to container registry images on private projects.
            'sudo': Grants permission to perform API actions as any user in the system, when authenticated as an admin user.
            'openid': Grants permission to authenticate with GitLab using OpenID Connect. Also gives read-only access to the user's profile and group memberships.
            'profile': Grants read-only access to the user's profile data using OpenID Connect.
            'email': Grants read-only access to the user's primary email address using OpenID Connect

    basicAuth:
      type: http
      scheme: basic

    basicAuthBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 11713937
        username:
          type: string
          description: User Name
          example: KeyboardWarriorsRedocly
        name:
          type: string
          description: Name
          example: Keyboard Warriors
        state:
          type: string
          example: active
        avatar_url:
          type: string
          example: https://gitlab.com/uploads/-/system/user/avatar/11713937/avatar.png
        web_url:
          type: string
          example: https://gitlab.com/KeyboardWarriorsRedocly
tags:
  - name: Try It
    description: Everything about your Try It authorizations